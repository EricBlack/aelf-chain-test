// Code generated by protoc-gen-go. DO NOT EDIT.
// source: aedpos_contract.proto

package aedpos_contract

import (
	aelf "aelf"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AElfConsensusBehaviour int32

const (
	AElfConsensusBehaviour_UpdateValue                       AElfConsensusBehaviour = 0
	AElfConsensusBehaviour_NextRound                         AElfConsensusBehaviour = 1
	AElfConsensusBehaviour_NextTerm                          AElfConsensusBehaviour = 2
	AElfConsensusBehaviour_UpdateValueWithoutPreviousInValue AElfConsensusBehaviour = 3
	AElfConsensusBehaviour_Nothing                           AElfConsensusBehaviour = 4
	AElfConsensusBehaviour_TinyBlock                         AElfConsensusBehaviour = 5
)

var AElfConsensusBehaviour_name = map[int32]string{
	0: "UpdateValue",
	1: "NextRound",
	2: "NextTerm",
	3: "UpdateValueWithoutPreviousInValue",
	4: "Nothing",
	5: "TinyBlock",
}

var AElfConsensusBehaviour_value = map[string]int32{
	"UpdateValue":                       0,
	"NextRound":                         1,
	"NextTerm":                          2,
	"UpdateValueWithoutPreviousInValue": 3,
	"Nothing":                           4,
	"TinyBlock":                         5,
}

func (x AElfConsensusBehaviour) String() string {
	return proto.EnumName(AElfConsensusBehaviour_name, int32(x))
}

func (AElfConsensusBehaviour) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{0}
}

// Events
type IrreversibleBlockFound struct {
	Offset               int64    `protobuf:"zigzag64,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IrreversibleBlockFound) Reset()         { *m = IrreversibleBlockFound{} }
func (m *IrreversibleBlockFound) String() string { return proto.CompactTextString(m) }
func (*IrreversibleBlockFound) ProtoMessage()    {}
func (*IrreversibleBlockFound) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{0}
}

func (m *IrreversibleBlockFound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IrreversibleBlockFound.Unmarshal(m, b)
}
func (m *IrreversibleBlockFound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IrreversibleBlockFound.Marshal(b, m, deterministic)
}
func (m *IrreversibleBlockFound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IrreversibleBlockFound.Merge(m, src)
}
func (m *IrreversibleBlockFound) XXX_Size() int {
	return xxx_messageInfo_IrreversibleBlockFound.Size(m)
}
func (m *IrreversibleBlockFound) XXX_DiscardUnknown() {
	xxx_messageInfo_IrreversibleBlockFound.DiscardUnknown(m)
}

var xxx_messageInfo_IrreversibleBlockFound proto.InternalMessageInfo

func (m *IrreversibleBlockFound) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type InitialAElfConsensusContractInput struct {
	IsTermStayOne        bool     `protobuf:"varint,1,opt,name=is_term_stay_one,json=isTermStayOne,proto3" json:"is_term_stay_one,omitempty"`
	IsSideChain          bool     `protobuf:"varint,2,opt,name=is_side_chain,json=isSideChain,proto3" json:"is_side_chain,omitempty"`
	TimeEachTerm         int64    `protobuf:"zigzag64,3,opt,name=time_each_term,json=timeEachTerm,proto3" json:"time_each_term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitialAElfConsensusContractInput) Reset()         { *m = InitialAElfConsensusContractInput{} }
func (m *InitialAElfConsensusContractInput) String() string { return proto.CompactTextString(m) }
func (*InitialAElfConsensusContractInput) ProtoMessage()    {}
func (*InitialAElfConsensusContractInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{1}
}

func (m *InitialAElfConsensusContractInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitialAElfConsensusContractInput.Unmarshal(m, b)
}
func (m *InitialAElfConsensusContractInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitialAElfConsensusContractInput.Marshal(b, m, deterministic)
}
func (m *InitialAElfConsensusContractInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitialAElfConsensusContractInput.Merge(m, src)
}
func (m *InitialAElfConsensusContractInput) XXX_Size() int {
	return xxx_messageInfo_InitialAElfConsensusContractInput.Size(m)
}
func (m *InitialAElfConsensusContractInput) XXX_DiscardUnknown() {
	xxx_messageInfo_InitialAElfConsensusContractInput.DiscardUnknown(m)
}

var xxx_messageInfo_InitialAElfConsensusContractInput proto.InternalMessageInfo

func (m *InitialAElfConsensusContractInput) GetIsTermStayOne() bool {
	if m != nil {
		return m.IsTermStayOne
	}
	return false
}

func (m *InitialAElfConsensusContractInput) GetIsSideChain() bool {
	if m != nil {
		return m.IsSideChain
	}
	return false
}

func (m *InitialAElfConsensusContractInput) GetTimeEachTerm() int64 {
	if m != nil {
		return m.TimeEachTerm
	}
	return 0
}

// Just used as parameter of consensus contract method.
type UpdateValueInput struct {
	OutValue                  *aelf.Hash            `protobuf:"bytes,1,opt,name=out_value,json=outValue,proto3" json:"out_value,omitempty"`
	Signature                 *aelf.Hash            `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	RoundId                   int64                 `protobuf:"zigzag64,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	PreviousInValue           *aelf.Hash            `protobuf:"bytes,5,opt,name=previous_in_value,json=previousInValue,proto3" json:"previous_in_value,omitempty"`
	ActualMiningTime          *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=actual_mining_time,json=actualMiningTime,proto3" json:"actual_mining_time,omitempty"`
	SupposedOrderOfNextRound  int32                 `protobuf:"zigzag32,7,opt,name=supposed_order_of_next_round,json=supposedOrderOfNextRound,proto3" json:"supposed_order_of_next_round,omitempty"`
	TuneOrderInformation      map[string]int32      `protobuf:"bytes,8,rep,name=tune_order_information,json=tuneOrderInformation,proto3" json:"tune_order_information,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EncryptedInValues         map[string][]byte     `protobuf:"bytes,9,rep,name=encrypted_in_values,json=encryptedInValues,proto3" json:"encrypted_in_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DecryptedPreviousInValues map[string][]byte     `protobuf:"bytes,10,rep,name=decrypted_previous_in_values,json=decryptedPreviousInValues,proto3" json:"decrypted_previous_in_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProducedBlocks            int64                 `protobuf:"zigzag64,11,opt,name=produced_blocks,json=producedBlocks,proto3" json:"produced_blocks,omitempty"`
	MinersPreviousInValues    map[string]*aelf.Hash `protobuf:"bytes,12,rep,name=miners_previous_in_values,json=minersPreviousInValues,proto3" json:"miners_previous_in_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral      struct{}              `json:"-"`
	XXX_unrecognized          []byte                `json:"-"`
	XXX_sizecache             int32                 `json:"-"`
}

func (m *UpdateValueInput) Reset()         { *m = UpdateValueInput{} }
func (m *UpdateValueInput) String() string { return proto.CompactTextString(m) }
func (*UpdateValueInput) ProtoMessage()    {}
func (*UpdateValueInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{2}
}

func (m *UpdateValueInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateValueInput.Unmarshal(m, b)
}
func (m *UpdateValueInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateValueInput.Marshal(b, m, deterministic)
}
func (m *UpdateValueInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateValueInput.Merge(m, src)
}
func (m *UpdateValueInput) XXX_Size() int {
	return xxx_messageInfo_UpdateValueInput.Size(m)
}
func (m *UpdateValueInput) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateValueInput.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateValueInput proto.InternalMessageInfo

func (m *UpdateValueInput) GetOutValue() *aelf.Hash {
	if m != nil {
		return m.OutValue
	}
	return nil
}

func (m *UpdateValueInput) GetSignature() *aelf.Hash {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *UpdateValueInput) GetRoundId() int64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *UpdateValueInput) GetPreviousInValue() *aelf.Hash {
	if m != nil {
		return m.PreviousInValue
	}
	return nil
}

func (m *UpdateValueInput) GetActualMiningTime() *timestamp.Timestamp {
	if m != nil {
		return m.ActualMiningTime
	}
	return nil
}

func (m *UpdateValueInput) GetSupposedOrderOfNextRound() int32 {
	if m != nil {
		return m.SupposedOrderOfNextRound
	}
	return 0
}

func (m *UpdateValueInput) GetTuneOrderInformation() map[string]int32 {
	if m != nil {
		return m.TuneOrderInformation
	}
	return nil
}

func (m *UpdateValueInput) GetEncryptedInValues() map[string][]byte {
	if m != nil {
		return m.EncryptedInValues
	}
	return nil
}

func (m *UpdateValueInput) GetDecryptedPreviousInValues() map[string][]byte {
	if m != nil {
		return m.DecryptedPreviousInValues
	}
	return nil
}

func (m *UpdateValueInput) GetProducedBlocks() int64 {
	if m != nil {
		return m.ProducedBlocks
	}
	return 0
}

func (m *UpdateValueInput) GetMinersPreviousInValues() map[string]*aelf.Hash {
	if m != nil {
		return m.MinersPreviousInValues
	}
	return nil
}

// The miners public key list for each term.
type MinerList struct {
	PublicKeys           [][]byte `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MinerList) Reset()         { *m = MinerList{} }
func (m *MinerList) String() string { return proto.CompactTextString(m) }
func (*MinerList) ProtoMessage()    {}
func (*MinerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{3}
}

func (m *MinerList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinerList.Unmarshal(m, b)
}
func (m *MinerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinerList.Marshal(b, m, deterministic)
}
func (m *MinerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinerList.Merge(m, src)
}
func (m *MinerList) XXX_Size() int {
	return xxx_messageInfo_MinerList.Size(m)
}
func (m *MinerList) XXX_DiscardUnknown() {
	xxx_messageInfo_MinerList.DiscardUnknown(m)
}

var xxx_messageInfo_MinerList proto.InternalMessageInfo

func (m *MinerList) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

// To query first round number of each term.
type TermNumberLookUp struct {
	Map                  map[int64]int64 `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TermNumberLookUp) Reset()         { *m = TermNumberLookUp{} }
func (m *TermNumberLookUp) String() string { return proto.CompactTextString(m) }
func (*TermNumberLookUp) ProtoMessage()    {}
func (*TermNumberLookUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{4}
}

func (m *TermNumberLookUp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermNumberLookUp.Unmarshal(m, b)
}
func (m *TermNumberLookUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermNumberLookUp.Marshal(b, m, deterministic)
}
func (m *TermNumberLookUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermNumberLookUp.Merge(m, src)
}
func (m *TermNumberLookUp) XXX_Size() int {
	return xxx_messageInfo_TermNumberLookUp.Size(m)
}
func (m *TermNumberLookUp) XXX_DiscardUnknown() {
	xxx_messageInfo_TermNumberLookUp.DiscardUnknown(m)
}

var xxx_messageInfo_TermNumberLookUp proto.InternalMessageInfo

func (m *TermNumberLookUp) GetMap() map[int64]int64 {
	if m != nil {
		return m.Map
	}
	return nil
}

// All the candidates.
type Candidates struct {
	PublicKeys           [][]byte `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Candidates) Reset()         { *m = Candidates{} }
func (m *Candidates) String() string { return proto.CompactTextString(m) }
func (*Candidates) ProtoMessage()    {}
func (*Candidates) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{5}
}

func (m *Candidates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Candidates.Unmarshal(m, b)
}
func (m *Candidates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Candidates.Marshal(b, m, deterministic)
}
func (m *Candidates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candidates.Merge(m, src)
}
func (m *Candidates) XXX_Size() int {
	return xxx_messageInfo_Candidates.Size(m)
}
func (m *Candidates) XXX_DiscardUnknown() {
	xxx_messageInfo_Candidates.DiscardUnknown(m)
}

var xxx_messageInfo_Candidates proto.InternalMessageInfo

func (m *Candidates) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

// The information of a round.
type Round struct {
	RoundNumber                       int64                    `protobuf:"zigzag64,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	RealTimeMinersInformation         map[string]*MinerInRound `protobuf:"bytes,2,rep,name=real_time_miners_information,json=realTimeMinersInformation,proto3" json:"real_time_miners_information,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MainChainMinersRoundNumber        int64                    `protobuf:"zigzag64,3,opt,name=main_chain_miners_round_number,json=mainChainMinersRoundNumber,proto3" json:"main_chain_miners_round_number,omitempty"`
	BlockchainAge                     int64                    `protobuf:"zigzag64,4,opt,name=blockchain_age,json=blockchainAge,proto3" json:"blockchain_age,omitempty"`
	ExtraBlockProducerOfPreviousRound string                   `protobuf:"bytes,7,opt,name=extra_block_producer_of_previous_round,json=extraBlockProducerOfPreviousRound,proto3" json:"extra_block_producer_of_previous_round,omitempty"`
	TermNumber                        int64                    `protobuf:"zigzag64,8,opt,name=term_number,json=termNumber,proto3" json:"term_number,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}                 `json:"-"`
	XXX_unrecognized                  []byte                   `json:"-"`
	XXX_sizecache                     int32                    `json:"-"`
}

func (m *Round) Reset()         { *m = Round{} }
func (m *Round) String() string { return proto.CompactTextString(m) }
func (*Round) ProtoMessage()    {}
func (*Round) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{6}
}

func (m *Round) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Round.Unmarshal(m, b)
}
func (m *Round) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Round.Marshal(b, m, deterministic)
}
func (m *Round) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Round.Merge(m, src)
}
func (m *Round) XXX_Size() int {
	return xxx_messageInfo_Round.Size(m)
}
func (m *Round) XXX_DiscardUnknown() {
	xxx_messageInfo_Round.DiscardUnknown(m)
}

var xxx_messageInfo_Round proto.InternalMessageInfo

func (m *Round) GetRoundNumber() int64 {
	if m != nil {
		return m.RoundNumber
	}
	return 0
}

func (m *Round) GetRealTimeMinersInformation() map[string]*MinerInRound {
	if m != nil {
		return m.RealTimeMinersInformation
	}
	return nil
}

func (m *Round) GetMainChainMinersRoundNumber() int64 {
	if m != nil {
		return m.MainChainMinersRoundNumber
	}
	return 0
}

func (m *Round) GetBlockchainAge() int64 {
	if m != nil {
		return m.BlockchainAge
	}
	return 0
}

func (m *Round) GetExtraBlockProducerOfPreviousRound() string {
	if m != nil {
		return m.ExtraBlockProducerOfPreviousRound
	}
	return ""
}

func (m *Round) GetTermNumber() int64 {
	if m != nil {
		return m.TermNumber
	}
	return 0
}

// The information of a miner in a specific round.
type MinerInRound struct {
	Order                     int32                  `protobuf:"zigzag32,1,opt,name=order,proto3" json:"order,omitempty"`
	IsExtraBlockProducer      bool                   `protobuf:"varint,2,opt,name=is_extra_block_producer,json=isExtraBlockProducer,proto3" json:"is_extra_block_producer,omitempty"`
	InValue                   *aelf.Hash             `protobuf:"bytes,3,opt,name=in_value,json=inValue,proto3" json:"in_value,omitempty"`
	OutValue                  *aelf.Hash             `protobuf:"bytes,4,opt,name=out_value,json=outValue,proto3" json:"out_value,omitempty"`
	Signature                 *aelf.Hash             `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	ExpectedMiningTime        *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=expected_mining_time,json=expectedMiningTime,proto3" json:"expected_mining_time,omitempty"`
	ProducedBlocks            int64                  `protobuf:"zigzag64,7,opt,name=produced_blocks,json=producedBlocks,proto3" json:"produced_blocks,omitempty"`
	MissedTimeSlots           int64                  `protobuf:"zigzag64,8,opt,name=missed_time_slots,json=missedTimeSlots,proto3" json:"missed_time_slots,omitempty"`
	PublicKey                 string                 `protobuf:"bytes,9,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PreviousInValue           *aelf.Hash             `protobuf:"bytes,12,opt,name=previous_in_value,json=previousInValue,proto3" json:"previous_in_value,omitempty"`
	SupposedOrderOfNextRound  int32                  `protobuf:"zigzag32,13,opt,name=supposed_order_of_next_round,json=supposedOrderOfNextRound,proto3" json:"supposed_order_of_next_round,omitempty"`
	FinalOrderOfNextRound     int32                  `protobuf:"zigzag32,14,opt,name=final_order_of_next_round,json=finalOrderOfNextRound,proto3" json:"final_order_of_next_round,omitempty"`
	ActualMiningTimes         []*timestamp.Timestamp `protobuf:"bytes,15,rep,name=actual_mining_times,json=actualMiningTimes,proto3" json:"actual_mining_times,omitempty"`
	EncryptedInValues         map[string][]byte      `protobuf:"bytes,16,rep,name=encrypted_in_values,json=encryptedInValues,proto3" json:"encrypted_in_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DecryptedPreviousInValues map[string][]byte      `protobuf:"bytes,17,rep,name=decrypted_previous_inValues,json=decryptedPreviousInValues,proto3" json:"decrypted_previous_inValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProducedTinyBlocks        int32                  `protobuf:"zigzag32,18,opt,name=produced_tiny_blocks,json=producedTinyBlocks,proto3" json:"produced_tiny_blocks,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}               `json:"-"`
	XXX_unrecognized          []byte                 `json:"-"`
	XXX_sizecache             int32                  `json:"-"`
}

func (m *MinerInRound) Reset()         { *m = MinerInRound{} }
func (m *MinerInRound) String() string { return proto.CompactTextString(m) }
func (*MinerInRound) ProtoMessage()    {}
func (*MinerInRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{7}
}

func (m *MinerInRound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinerInRound.Unmarshal(m, b)
}
func (m *MinerInRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinerInRound.Marshal(b, m, deterministic)
}
func (m *MinerInRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinerInRound.Merge(m, src)
}
func (m *MinerInRound) XXX_Size() int {
	return xxx_messageInfo_MinerInRound.Size(m)
}
func (m *MinerInRound) XXX_DiscardUnknown() {
	xxx_messageInfo_MinerInRound.DiscardUnknown(m)
}

var xxx_messageInfo_MinerInRound proto.InternalMessageInfo

func (m *MinerInRound) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *MinerInRound) GetIsExtraBlockProducer() bool {
	if m != nil {
		return m.IsExtraBlockProducer
	}
	return false
}

func (m *MinerInRound) GetInValue() *aelf.Hash {
	if m != nil {
		return m.InValue
	}
	return nil
}

func (m *MinerInRound) GetOutValue() *aelf.Hash {
	if m != nil {
		return m.OutValue
	}
	return nil
}

func (m *MinerInRound) GetSignature() *aelf.Hash {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *MinerInRound) GetExpectedMiningTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpectedMiningTime
	}
	return nil
}

func (m *MinerInRound) GetProducedBlocks() int64 {
	if m != nil {
		return m.ProducedBlocks
	}
	return 0
}

func (m *MinerInRound) GetMissedTimeSlots() int64 {
	if m != nil {
		return m.MissedTimeSlots
	}
	return 0
}

func (m *MinerInRound) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *MinerInRound) GetPreviousInValue() *aelf.Hash {
	if m != nil {
		return m.PreviousInValue
	}
	return nil
}

func (m *MinerInRound) GetSupposedOrderOfNextRound() int32 {
	if m != nil {
		return m.SupposedOrderOfNextRound
	}
	return 0
}

func (m *MinerInRound) GetFinalOrderOfNextRound() int32 {
	if m != nil {
		return m.FinalOrderOfNextRound
	}
	return 0
}

func (m *MinerInRound) GetActualMiningTimes() []*timestamp.Timestamp {
	if m != nil {
		return m.ActualMiningTimes
	}
	return nil
}

func (m *MinerInRound) GetEncryptedInValues() map[string][]byte {
	if m != nil {
		return m.EncryptedInValues
	}
	return nil
}

func (m *MinerInRound) GetDecryptedPreviousInValues() map[string][]byte {
	if m != nil {
		return m.DecryptedPreviousInValues
	}
	return nil
}

func (m *MinerInRound) GetProducedTinyBlocks() int32 {
	if m != nil {
		return m.ProducedTinyBlocks
	}
	return 0
}

type AElfConsensusHeaderInformation struct {
	SenderPublicKey      []byte                 `protobuf:"bytes,1,opt,name=sender_publicKey,json=senderPublicKey,proto3" json:"sender_publicKey,omitempty"`
	Round                *Round                 `protobuf:"bytes,2,opt,name=round,proto3" json:"round,omitempty"`
	Behaviour            AElfConsensusBehaviour `protobuf:"varint,3,opt,name=behaviour,proto3,enum=AElfConsensusBehaviour" json:"behaviour,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AElfConsensusHeaderInformation) Reset()         { *m = AElfConsensusHeaderInformation{} }
func (m *AElfConsensusHeaderInformation) String() string { return proto.CompactTextString(m) }
func (*AElfConsensusHeaderInformation) ProtoMessage()    {}
func (*AElfConsensusHeaderInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{8}
}

func (m *AElfConsensusHeaderInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AElfConsensusHeaderInformation.Unmarshal(m, b)
}
func (m *AElfConsensusHeaderInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AElfConsensusHeaderInformation.Marshal(b, m, deterministic)
}
func (m *AElfConsensusHeaderInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AElfConsensusHeaderInformation.Merge(m, src)
}
func (m *AElfConsensusHeaderInformation) XXX_Size() int {
	return xxx_messageInfo_AElfConsensusHeaderInformation.Size(m)
}
func (m *AElfConsensusHeaderInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_AElfConsensusHeaderInformation.DiscardUnknown(m)
}

var xxx_messageInfo_AElfConsensusHeaderInformation proto.InternalMessageInfo

func (m *AElfConsensusHeaderInformation) GetSenderPublicKey() []byte {
	if m != nil {
		return m.SenderPublicKey
	}
	return nil
}

func (m *AElfConsensusHeaderInformation) GetRound() *Round {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *AElfConsensusHeaderInformation) GetBehaviour() AElfConsensusBehaviour {
	if m != nil {
		return m.Behaviour
	}
	return AElfConsensusBehaviour_UpdateValue
}

type AElfConsensusHint struct {
	Behaviour            AElfConsensusBehaviour `protobuf:"varint,1,opt,name=behaviour,proto3,enum=AElfConsensusBehaviour" json:"behaviour,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AElfConsensusHint) Reset()         { *m = AElfConsensusHint{} }
func (m *AElfConsensusHint) String() string { return proto.CompactTextString(m) }
func (*AElfConsensusHint) ProtoMessage()    {}
func (*AElfConsensusHint) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{9}
}

func (m *AElfConsensusHint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AElfConsensusHint.Unmarshal(m, b)
}
func (m *AElfConsensusHint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AElfConsensusHint.Marshal(b, m, deterministic)
}
func (m *AElfConsensusHint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AElfConsensusHint.Merge(m, src)
}
func (m *AElfConsensusHint) XXX_Size() int {
	return xxx_messageInfo_AElfConsensusHint.Size(m)
}
func (m *AElfConsensusHint) XXX_DiscardUnknown() {
	xxx_messageInfo_AElfConsensusHint.DiscardUnknown(m)
}

var xxx_messageInfo_AElfConsensusHint proto.InternalMessageInfo

func (m *AElfConsensusHint) GetBehaviour() AElfConsensusBehaviour {
	if m != nil {
		return m.Behaviour
	}
	return AElfConsensusBehaviour_UpdateValue
}

type AElfConsensusTriggerInformation struct {
	PublicKey            []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	RandomHash           *aelf.Hash             `protobuf:"bytes,2,opt,name=random_hash,json=randomHash,proto3" json:"random_hash,omitempty"`
	PreviousRandomHash   *aelf.Hash             `protobuf:"bytes,3,opt,name=previous_random_hash,json=previousRandomHash,proto3" json:"previous_random_hash,omitempty"`
	Behaviour            AElfConsensusBehaviour `protobuf:"varint,4,opt,name=behaviour,proto3,enum=AElfConsensusBehaviour" json:"behaviour,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AElfConsensusTriggerInformation) Reset()         { *m = AElfConsensusTriggerInformation{} }
func (m *AElfConsensusTriggerInformation) String() string { return proto.CompactTextString(m) }
func (*AElfConsensusTriggerInformation) ProtoMessage()    {}
func (*AElfConsensusTriggerInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{10}
}

func (m *AElfConsensusTriggerInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AElfConsensusTriggerInformation.Unmarshal(m, b)
}
func (m *AElfConsensusTriggerInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AElfConsensusTriggerInformation.Marshal(b, m, deterministic)
}
func (m *AElfConsensusTriggerInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AElfConsensusTriggerInformation.Merge(m, src)
}
func (m *AElfConsensusTriggerInformation) XXX_Size() int {
	return xxx_messageInfo_AElfConsensusTriggerInformation.Size(m)
}
func (m *AElfConsensusTriggerInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_AElfConsensusTriggerInformation.DiscardUnknown(m)
}

var xxx_messageInfo_AElfConsensusTriggerInformation proto.InternalMessageInfo

func (m *AElfConsensusTriggerInformation) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *AElfConsensusTriggerInformation) GetRandomHash() *aelf.Hash {
	if m != nil {
		return m.RandomHash
	}
	return nil
}

func (m *AElfConsensusTriggerInformation) GetPreviousRandomHash() *aelf.Hash {
	if m != nil {
		return m.PreviousRandomHash
	}
	return nil
}

func (m *AElfConsensusTriggerInformation) GetBehaviour() AElfConsensusBehaviour {
	if m != nil {
		return m.Behaviour
	}
	return AElfConsensusBehaviour_UpdateValue
}

type TermInfo struct {
	TermNumber           int64    `protobuf:"zigzag64,1,opt,name=term_number,json=termNumber,proto3" json:"term_number,omitempty"`
	RoundNumber          int64    `protobuf:"zigzag64,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TermInfo) Reset()         { *m = TermInfo{} }
func (m *TermInfo) String() string { return proto.CompactTextString(m) }
func (*TermInfo) ProtoMessage()    {}
func (*TermInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{11}
}

func (m *TermInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermInfo.Unmarshal(m, b)
}
func (m *TermInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermInfo.Marshal(b, m, deterministic)
}
func (m *TermInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermInfo.Merge(m, src)
}
func (m *TermInfo) XXX_Size() int {
	return xxx_messageInfo_TermInfo.Size(m)
}
func (m *TermInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TermInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TermInfo proto.InternalMessageInfo

func (m *TermInfo) GetTermNumber() int64 {
	if m != nil {
		return m.TermNumber
	}
	return 0
}

func (m *TermInfo) GetRoundNumber() int64 {
	if m != nil {
		return m.RoundNumber
	}
	return 0
}

type MinerListWithRoundNumber struct {
	MinerList            *MinerList `protobuf:"bytes,1,opt,name=miner_list,json=minerList,proto3" json:"miner_list,omitempty"`
	RoundNumber          int64      `protobuf:"zigzag64,2,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MinerListWithRoundNumber) Reset()         { *m = MinerListWithRoundNumber{} }
func (m *MinerListWithRoundNumber) String() string { return proto.CompactTextString(m) }
func (*MinerListWithRoundNumber) ProtoMessage()    {}
func (*MinerListWithRoundNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{12}
}

func (m *MinerListWithRoundNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinerListWithRoundNumber.Unmarshal(m, b)
}
func (m *MinerListWithRoundNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinerListWithRoundNumber.Marshal(b, m, deterministic)
}
func (m *MinerListWithRoundNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinerListWithRoundNumber.Merge(m, src)
}
func (m *MinerListWithRoundNumber) XXX_Size() int {
	return xxx_messageInfo_MinerListWithRoundNumber.Size(m)
}
func (m *MinerListWithRoundNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_MinerListWithRoundNumber.DiscardUnknown(m)
}

var xxx_messageInfo_MinerListWithRoundNumber proto.InternalMessageInfo

func (m *MinerListWithRoundNumber) GetMinerList() *MinerList {
	if m != nil {
		return m.MinerList
	}
	return nil
}

func (m *MinerListWithRoundNumber) GetRoundNumber() int64 {
	if m != nil {
		return m.RoundNumber
	}
	return 0
}

type TinyBlockInput struct {
	RoundId              int64                `protobuf:"zigzag64,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	ActualMiningTime     *timestamp.Timestamp `protobuf:"bytes,2,opt,name=actual_mining_time,json=actualMiningTime,proto3" json:"actual_mining_time,omitempty"`
	ProducedBlocks       int64                `protobuf:"zigzag64,3,opt,name=produced_blocks,json=producedBlocks,proto3" json:"produced_blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TinyBlockInput) Reset()         { *m = TinyBlockInput{} }
func (m *TinyBlockInput) String() string { return proto.CompactTextString(m) }
func (*TinyBlockInput) ProtoMessage()    {}
func (*TinyBlockInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{13}
}

func (m *TinyBlockInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TinyBlockInput.Unmarshal(m, b)
}
func (m *TinyBlockInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TinyBlockInput.Marshal(b, m, deterministic)
}
func (m *TinyBlockInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TinyBlockInput.Merge(m, src)
}
func (m *TinyBlockInput) XXX_Size() int {
	return xxx_messageInfo_TinyBlockInput.Size(m)
}
func (m *TinyBlockInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TinyBlockInput.DiscardUnknown(m)
}

var xxx_messageInfo_TinyBlockInput proto.InternalMessageInfo

func (m *TinyBlockInput) GetRoundId() int64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *TinyBlockInput) GetActualMiningTime() *timestamp.Timestamp {
	if m != nil {
		return m.ActualMiningTime
	}
	return nil
}

func (m *TinyBlockInput) GetProducedBlocks() int64 {
	if m != nil {
		return m.ProducedBlocks
	}
	return 0
}

type VoteMinersCountInput struct {
	MinersCount          int32    `protobuf:"zigzag32,1,opt,name=miners_count,json=minersCount,proto3" json:"miners_count,omitempty"`
	Amount               int64    `protobuf:"zigzag64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteMinersCountInput) Reset()         { *m = VoteMinersCountInput{} }
func (m *VoteMinersCountInput) String() string { return proto.CompactTextString(m) }
func (*VoteMinersCountInput) ProtoMessage()    {}
func (*VoteMinersCountInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{14}
}

func (m *VoteMinersCountInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteMinersCountInput.Unmarshal(m, b)
}
func (m *VoteMinersCountInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteMinersCountInput.Marshal(b, m, deterministic)
}
func (m *VoteMinersCountInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteMinersCountInput.Merge(m, src)
}
func (m *VoteMinersCountInput) XXX_Size() int {
	return xxx_messageInfo_VoteMinersCountInput.Size(m)
}
func (m *VoteMinersCountInput) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteMinersCountInput.DiscardUnknown(m)
}

var xxx_messageInfo_VoteMinersCountInput proto.InternalMessageInfo

func (m *VoteMinersCountInput) GetMinersCount() int32 {
	if m != nil {
		return m.MinersCount
	}
	return 0
}

func (m *VoteMinersCountInput) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ConsensusInformation struct {
	Bytes                []byte   `protobuf:"bytes,1,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsensusInformation) Reset()         { *m = ConsensusInformation{} }
func (m *ConsensusInformation) String() string { return proto.CompactTextString(m) }
func (*ConsensusInformation) ProtoMessage()    {}
func (*ConsensusInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa8202605dc4492, []int{15}
}

func (m *ConsensusInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsensusInformation.Unmarshal(m, b)
}
func (m *ConsensusInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsensusInformation.Marshal(b, m, deterministic)
}
func (m *ConsensusInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusInformation.Merge(m, src)
}
func (m *ConsensusInformation) XXX_Size() int {
	return xxx_messageInfo_ConsensusInformation.Size(m)
}
func (m *ConsensusInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusInformation.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusInformation proto.InternalMessageInfo

func (m *ConsensusInformation) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func init() {
	proto.RegisterEnum("AElfConsensusBehaviour", AElfConsensusBehaviour_name, AElfConsensusBehaviour_value)
	proto.RegisterType((*IrreversibleBlockFound)(nil), "IrreversibleBlockFound")
	proto.RegisterType((*InitialAElfConsensusContractInput)(nil), "InitialAElfConsensusContractInput")
	proto.RegisterType((*UpdateValueInput)(nil), "UpdateValueInput")
	proto.RegisterMapType((map[string][]byte)(nil), "UpdateValueInput.DecryptedPreviousInValuesEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "UpdateValueInput.EncryptedInValuesEntry")
	proto.RegisterMapType((map[string]*aelf.Hash)(nil), "UpdateValueInput.MinersPreviousInValuesEntry")
	proto.RegisterMapType((map[string]int32)(nil), "UpdateValueInput.TuneOrderInformationEntry")
	proto.RegisterType((*MinerList)(nil), "MinerList")
	proto.RegisterType((*TermNumberLookUp)(nil), "TermNumberLookUp")
	proto.RegisterMapType((map[int64]int64)(nil), "TermNumberLookUp.MapEntry")
	proto.RegisterType((*Candidates)(nil), "Candidates")
	proto.RegisterType((*Round)(nil), "Round")
	proto.RegisterMapType((map[string]*MinerInRound)(nil), "Round.RealTimeMinersInformationEntry")
	proto.RegisterType((*MinerInRound)(nil), "MinerInRound")
	proto.RegisterMapType((map[string][]byte)(nil), "MinerInRound.DecryptedPreviousInValuesEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "MinerInRound.EncryptedInValuesEntry")
	proto.RegisterType((*AElfConsensusHeaderInformation)(nil), "AElfConsensusHeaderInformation")
	proto.RegisterType((*AElfConsensusHint)(nil), "AElfConsensusHint")
	proto.RegisterType((*AElfConsensusTriggerInformation)(nil), "AElfConsensusTriggerInformation")
	proto.RegisterType((*TermInfo)(nil), "TermInfo")
	proto.RegisterType((*MinerListWithRoundNumber)(nil), "MinerListWithRoundNumber")
	proto.RegisterType((*TinyBlockInput)(nil), "TinyBlockInput")
	proto.RegisterType((*VoteMinersCountInput)(nil), "VoteMinersCountInput")
	proto.RegisterType((*ConsensusInformation)(nil), "ConsensusInformation")
}

func init() { proto.RegisterFile("aedpos_contract.proto", fileDescriptor_5fa8202605dc4492) }

var fileDescriptor_5fa8202605dc4492 = []byte{
	// 1749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x73, 0xdb, 0xb8,
	0x15, 0x0f, 0x2d, 0x2b, 0x96, 0x9e, 0x64, 0x5b, 0x42, 0x14, 0x2f, 0xad, 0xb8, 0xb1, 0xcd, 0x6e,
	0xba, 0xde, 0x5d, 0x87, 0xd9, 0xc9, 0x76, 0xd3, 0x4c, 0xda, 0xe9, 0x34, 0x76, 0xbc, 0x8e, 0xb6,
	0x4e, 0x9c, 0xa5, 0x9d, 0x6d, 0x67, 0xda, 0x29, 0x07, 0x96, 0x20, 0x09, 0x13, 0x11, 0x64, 0x09,
	0x30, 0x63, 0x7d, 0x83, 0xee, 0x17, 0xe8, 0xb1, 0xcd, 0xb9, 0xc7, 0xde, 0x3a, 0x3d, 0xf5, 0xde,
	0xe9, 0x87, 0xe8, 0x87, 0x68, 0xaf, 0x1d, 0x00, 0xa4, 0x44, 0x8a, 0x94, 0xec, 0xe4, 0xd4, 0x9b,
	0xf8, 0xf0, 0xde, 0x0f, 0x0f, 0xef, 0xdf, 0x0f, 0x10, 0xdc, 0xc6, 0xa4, 0x17, 0xf8, 0xdc, 0xed,
	0xfa, 0x4c, 0x84, 0xb8, 0x2b, 0xec, 0x20, 0xf4, 0x85, 0xdf, 0x46, 0x98, 0x8c, 0xfa, 0x0f, 0xfc,
	0x40, 0x50, 0x9f, 0xf1, 0x58, 0xb6, 0xae, 0x64, 0x5d, 0x3f, 0x24, 0xb1, 0xe0, 0xce, 0xc0, 0xf7,
	0x07, 0x23, 0xf2, 0x40, 0x7d, 0x5d, 0x44, 0xfd, 0x07, 0xc4, 0x0b, 0xc4, 0x38, 0x5e, 0xdc, 0x9e,
	0x5d, 0x14, 0xd4, 0x23, 0x5c, 0x60, 0x2f, 0xd0, 0x0a, 0xd6, 0x23, 0xd8, 0xe8, 0x84, 0x21, 0x79,
	0x4b, 0x42, 0x4e, 0x2f, 0x46, 0xe4, 0x60, 0xe4, 0x77, 0xdf, 0x7c, 0xed, 0x47, 0xac, 0x87, 0x36,
	0xe0, 0xa6, 0xdf, 0xef, 0x73, 0x22, 0x4c, 0x63, 0xc7, 0xd8, 0x43, 0x4e, 0xfc, 0xf5, 0x64, 0xf9,
	0xdd, 0xdf, 0x4d, 0xc3, 0xfa, 0xa3, 0x01, 0xbb, 0x1d, 0x46, 0x05, 0xc5, 0xa3, 0xa7, 0x47, 0xa3,
	0xfe, 0xa1, 0xcf, 0x38, 0x61, 0x3c, 0xe2, 0x87, 0xf1, 0x09, 0x3a, 0x2c, 0x88, 0x04, 0xfa, 0x04,
	0x1a, 0x94, 0xbb, 0x82, 0x84, 0x9e, 0xcb, 0x05, 0x1e, 0xbb, 0x3e, 0x23, 0x0a, 0xad, 0xe2, 0xac,
	0x52, 0x7e, 0x4e, 0x42, 0xef, 0x4c, 0xe0, 0xf1, 0x29, 0x23, 0xc8, 0x82, 0x55, 0xca, 0x5d, 0x4e,
	0x7b, 0xc4, 0xed, 0x0e, 0x31, 0x65, 0xe6, 0x92, 0xd2, 0xaa, 0x51, 0x7e, 0x46, 0x7b, 0xe4, 0x50,
	0x8a, 0xd0, 0xc7, 0xb0, 0x26, 0xbd, 0x77, 0x09, 0xee, 0x0e, 0x15, 0xa6, 0x59, 0x52, 0x8e, 0xd5,
	0xa5, 0xf4, 0x08, 0x77, 0x87, 0x12, 0xd0, 0xfa, 0x5b, 0x05, 0x1a, 0xaf, 0x83, 0x1e, 0x16, 0xe4,
	0x3b, 0x3c, 0x8a, 0x48, 0xe2, 0x47, 0xd5, 0x8f, 0x84, 0xfb, 0x56, 0x4a, 0x94, 0x03, 0xb5, 0x87,
	0x60, 0xcb, 0x40, 0xda, 0xcf, 0x31, 0x1f, 0x3a, 0x15, 0x3f, 0x12, 0x4a, 0x1b, 0xed, 0x41, 0x95,
	0xd3, 0x01, 0xc3, 0x22, 0x0a, 0x89, 0xf2, 0x21, 0xab, 0x38, 0x5d, 0x44, 0x9b, 0x50, 0x09, 0x65,
	0x9c, 0x5c, 0xda, 0x8b, 0xfd, 0x58, 0x51, 0xdf, 0x9d, 0x1e, 0x7a, 0x04, 0xcd, 0x20, 0x24, 0x6f,
	0xa9, 0x1f, 0x71, 0x97, 0xb2, 0x78, 0xd7, 0x72, 0x0e, 0x6c, 0x3d, 0x51, 0xea, 0x30, 0xbd, 0xf9,
	0x73, 0x40, 0xb8, 0x2b, 0x22, 0x3c, 0x72, 0x3d, 0xca, 0x28, 0x1b, 0xb8, 0xf2, 0x60, 0xe6, 0x4d,
	0x65, 0xd8, 0xb6, 0x75, 0x26, 0xed, 0x24, 0x93, 0xf6, 0x79, 0x92, 0x49, 0xa7, 0xa1, 0xad, 0x5e,
	0x28, 0x23, 0x29, 0x46, 0x3f, 0x87, 0x2d, 0x1e, 0x05, 0x81, 0xcf, 0x49, 0xcf, 0xf5, 0xc3, 0x1e,
	0x09, 0x5d, 0xbf, 0xef, 0x32, 0x72, 0x29, 0x5c, 0xe5, 0xa3, 0xb9, 0xb2, 0x63, 0xec, 0x35, 0x1d,
	0x33, 0xd1, 0x39, 0x95, 0x2a, 0xa7, 0xfd, 0x97, 0xe4, 0x52, 0x38, 0x2a, 0xf7, 0x18, 0x36, 0x44,
	0xc4, 0x48, 0x6c, 0x4b, 0x59, 0xdf, 0x0f, 0x3d, 0x2c, 0xab, 0xd0, 0xac, 0xec, 0x94, 0xf6, 0x6a,
	0x0f, 0x3f, 0xb7, 0x67, 0x43, 0x6c, 0x9f, 0x47, 0x8c, 0x28, 0x9c, 0xce, 0x54, 0xfb, 0x88, 0x89,
	0x70, 0xec, 0xb4, 0x44, 0xc1, 0x12, 0xfa, 0x35, 0xdc, 0x22, 0xac, 0x1b, 0x8e, 0x03, 0x41, 0x7a,
	0x93, 0x28, 0x71, 0xb3, 0xaa, 0xf0, 0xf7, 0xf2, 0xf8, 0x47, 0x89, 0x72, 0x1c, 0x2d, 0xae, 0xc1,
	0x9b, 0x64, 0x56, 0x8e, 0x7e, 0x0f, 0x5b, 0x3d, 0x92, 0x20, 0xe7, 0x12, 0xc1, 0x4d, 0x50, 0x5b,
	0x7c, 0x91, 0xdf, 0xe2, 0x59, 0x62, 0xf5, 0x2a, 0x9b, 0x98, 0x78, 0xab, 0xcd, 0xde, 0xbc, 0x75,
	0xf4, 0x09, 0xac, 0x07, 0xa1, 0xdf, 0x8b, 0xba, 0xa4, 0xe7, 0x5e, 0xc8, 0x16, 0xe2, 0x66, 0x4d,
	0xd5, 0xc4, 0x5a, 0x22, 0x56, 0x8d, 0xc5, 0xd1, 0x10, 0x36, 0x3d, 0xca, 0x48, 0xc8, 0x8b, 0x1c,
	0xab, 0x2b, 0xc7, 0xee, 0xe7, 0x1d, 0x7b, 0xa1, 0x4c, 0x8a, 0xbd, 0xda, 0xf0, 0x0a, 0x17, 0xdb,
	0xc7, 0xb0, 0x39, 0x37, 0x25, 0xa8, 0x01, 0xa5, 0x37, 0x64, 0xac, 0x3a, 0xa1, 0xea, 0xc8, 0x9f,
	0xa8, 0x05, 0x65, 0x5d, 0xa7, 0xb2, 0xe8, 0xcb, 0x8e, 0xfe, 0x78, 0xb2, 0xf4, 0xd8, 0x68, 0x3f,
	0x83, 0x8d, 0xe2, 0xd8, 0x5f, 0x85, 0x52, 0x4f, 0xa3, 0x9c, 0xc0, 0xdd, 0xc5, 0xe1, 0x7d, 0x2f,
	0xb4, 0xd7, 0x70, 0x67, 0x41, 0x4c, 0x0a, 0xa0, 0x76, 0xd2, 0x50, 0xd9, 0x36, 0x9c, 0xc2, 0x5a,
	0xfb, 0x50, 0x55, 0xb0, 0x27, 0x94, 0x0b, 0xb4, 0x0d, 0xb5, 0x20, 0xba, 0x18, 0xd1, 0xae, 0xfb,
	0x86, 0x8c, 0xb9, 0x69, 0xec, 0x94, 0xf6, 0xea, 0x0e, 0x68, 0xd1, 0x2f, 0xc9, 0x98, 0x5b, 0x97,
	0xd0, 0x90, 0x13, 0xe7, 0x65, 0xe4, 0x5d, 0x90, 0xf0, 0xc4, 0xf7, 0xdf, 0xbc, 0x0e, 0xd0, 0x3e,
	0x94, 0x3c, 0x1c, 0x28, 0x65, 0xd9, 0xb3, 0xb3, 0xeb, 0xf6, 0x0b, 0x1c, 0xe8, 0xb4, 0x49, 0xb5,
	0xf6, 0x23, 0xa8, 0x24, 0x82, 0xb4, 0xcf, 0xa8, 0xe0, 0xf8, 0x28, 0xed, 0xe7, 0x7d, 0x80, 0x43,
	0xcc, 0x7a, 0x54, 0x96, 0x09, 0xbf, 0xda, 0xd1, 0x7f, 0x95, 0xa0, 0xac, 0xfb, 0x7a, 0x17, 0xea,
	0x7a, 0x68, 0x31, 0xe5, 0x54, 0xbc, 0x5b, 0x4d, 0xc9, 0xb4, 0x9f, 0xa8, 0x0f, 0x5b, 0x21, 0xc1,
	0x23, 0x35, 0x7b, 0xdc, 0xb8, 0x56, 0xd3, 0x03, 0x60, 0x49, 0x1d, 0xed, 0x9e, 0xad, 0x00, 0x6d,
	0x87, 0xe0, 0x91, 0x9c, 0x38, 0x3a, 0x1b, 0xb9, 0xd6, 0xdf, 0x0c, 0xe7, 0xad, 0xa3, 0x03, 0xb8,
	0xeb, 0x61, 0xca, 0xf4, 0xb8, 0x4f, 0x36, 0xca, 0x38, 0xa7, 0xa7, 0x6a, 0x5b, 0x6a, 0x29, 0x02,
	0xd0, 0x18, 0x4e, 0xca, 0xd7, 0x7b, 0xb0, 0xa6, 0xba, 0x4d, 0x63, 0xe0, 0x01, 0x31, 0x97, 0x95,
	0xcd, 0xea, 0x54, 0xfa, 0x74, 0x40, 0xd0, 0xb7, 0xf0, 0x23, 0x72, 0x29, 0x42, 0xac, 0x5b, 0xd3,
	0x8d, 0x5b, 0x52, 0xcd, 0xc4, 0x49, 0x17, 0x4e, 0xe7, 0x62, 0xd5, 0xd9, 0x55, 0xda, 0xaa, 0x63,
	0x5f, 0xc5, 0xba, 0xa7, 0xfd, 0xa4, 0xd2, 0x74, 0x20, 0xb7, 0xa1, 0xa6, 0x58, 0x2d, 0x76, 0xb5,
	0xa2, 0xb6, 0x05, 0x31, 0x49, 0x77, 0xfb, 0x37, 0x70, 0x77, 0x71, 0x6c, 0x0a, 0x8a, 0xf4, 0x87,
	0xd9, 0x22, 0x5d, 0xd5, 0x7d, 0xdf, 0x61, 0x6a, 0xcb, 0x74, 0xfe, 0xff, 0x5c, 0x81, 0x7a, 0x7a,
	0x4d, 0x96, 0x8a, 0x1a, 0xd5, 0x0a, 0xad, 0xe9, 0xe8, 0x0f, 0xf4, 0x15, 0x7c, 0x44, 0xb9, 0x5b,
	0x74, 0xf4, 0x98, 0x5e, 0x5b, 0x94, 0x1f, 0xe5, 0x8e, 0x8a, 0xee, 0x41, 0x65, 0xc2, 0x5a, 0xa5,
	0x5c, 0xbb, 0xac, 0xd0, 0x98, 0xad, 0x32, 0x9c, 0xba, 0x7c, 0x5d, 0x4e, 0x2d, 0x2f, 0xe2, 0xd4,
	0x13, 0x68, 0x91, 0xcb, 0x80, 0x74, 0xe5, 0xe0, 0x7e, 0x3f, 0x0a, 0x44, 0x89, 0x5d, 0x8a, 0x04,
	0x0b, 0x86, 0xf2, 0x4a, 0xe1, 0x50, 0xfe, 0x0c, 0x9a, 0x1e, 0xe5, 0x92, 0x2b, 0x55, 0xd1, 0xf3,
	0x91, 0x2f, 0x78, 0x9c, 0xd2, 0x75, 0xbd, 0x20, 0xf1, 0xce, 0xa4, 0x18, 0xfd, 0x00, 0x60, 0xda,
	0x6c, 0x66, 0x55, 0x25, 0xaf, 0x3a, 0xe9, 0xb5, 0x62, 0xea, 0xaf, 0x5f, 0x4d, 0xfd, 0x57, 0x11,
	0xf6, 0xea, 0x15, 0x84, 0xfd, 0x18, 0x36, 0xfb, 0x94, 0xe1, 0x51, 0xa1, 0xf1, 0x9a, 0x32, 0xbe,
	0xad, 0x14, 0x72, 0x96, 0xdf, 0xc0, 0xad, 0xfc, 0xa5, 0x83, 0x9b, 0xeb, 0xf1, 0x04, 0x9b, 0x1f,
	0xf2, 0xe6, 0xec, 0xad, 0x83, 0xa3, 0xf3, 0x62, 0x4e, 0x6f, 0x28, 0xac, 0x8f, 0x33, 0xe5, 0xfc,
	0x1e, 0x7c, 0x3e, 0x82, 0x3b, 0x85, 0x7c, 0xae, 0x97, 0xcd, 0xa6, 0x42, 0xdf, 0xcf, 0xa2, 0x7f,
	0x38, 0x95, 0x7f, 0x01, 0xad, 0x49, 0xd5, 0x08, 0xca, 0xc6, 0x49, 0xe9, 0x20, 0x15, 0x44, 0x94,
	0xac, 0x9d, 0x53, 0x36, 0xd6, 0xe5, 0xf3, 0xff, 0x48, 0x90, 0xd6, 0x3b, 0x03, 0xee, 0x66, 0xee,
	0xe5, 0xcf, 0x09, 0x9e, 0xb9, 0x80, 0x7d, 0x0a, 0x0d, 0x4e, 0x98, 0xac, 0x96, 0x49, 0xf9, 0x2a,
	0xec, 0xba, 0xb3, 0xae, 0xe5, 0xaf, 0x26, 0x55, 0xbd, 0x05, 0x65, 0x5d, 0x49, 0x7a, 0x30, 0xdd,
	0xb4, 0xe3, 0x89, 0xa4, 0x84, 0xe8, 0x2b, 0xa8, 0x5e, 0x90, 0x21, 0x96, 0x1e, 0xeb, 0xa1, 0xbd,
	0xf6, 0xf0, 0x23, 0x3b, 0xb3, 0xf9, 0x41, 0xb2, 0xec, 0x4c, 0x35, 0xad, 0x6f, 0xa0, 0x99, 0xf5,
	0x90, 0x32, 0x91, 0xc5, 0x32, 0xae, 0x8d, 0xf5, 0x6f, 0x03, 0xb6, 0x33, 0x5a, 0xe7, 0x21, 0x1d,
	0x0c, 0xb2, 0xe7, 0xcd, 0x76, 0xae, 0x3e, 0x69, 0xaa, 0x73, 0x3f, 0x87, 0x5a, 0x88, 0x59, 0xcf,
	0xf7, 0xdc, 0x21, 0xe6, 0xc3, 0x82, 0x7b, 0x02, 0xe8, 0x65, 0xf9, 0x1b, 0xfd, 0x4c, 0x16, 0x49,
	0xc2, 0x1c, 0x29, 0xab, 0xfc, 0xb8, 0x44, 0x89, 0x9e, 0x33, 0xb5, 0xce, 0x1c, 0x72, 0xf9, 0xda,
	0x87, 0x7c, 0x09, 0x15, 0x79, 0x9f, 0x90, 0x67, 0x9a, 0xe5, 0x1f, 0x63, 0x96, 0x7f, 0x72, 0x4c,
	0xbf, 0x94, 0x63, 0x7a, 0x6b, 0x08, 0xe6, 0xe4, 0xb6, 0xf3, 0x2b, 0x2a, 0x86, 0x69, 0x66, 0xfd,
	0x14, 0x40, 0x51, 0xb2, 0x3b, 0xa2, 0x5c, 0x4c, 0x5e, 0x4c, 0x13, 0x75, 0xa7, 0xea, 0x4d, 0xee,
	0x49, 0xd7, 0xd8, 0xe9, 0x4f, 0x06, 0xac, 0x4d, 0x1a, 0x46, 0xbf, 0xc8, 0xd2, 0xcf, 0x27, 0x23,
	0xfb, 0x7c, 0x2a, 0x7e, 0x06, 0x2d, 0x7d, 0xc0, 0x33, 0xa8, 0x80, 0x01, 0x4a, 0x45, 0x0c, 0x60,
	0x7d, 0x0b, 0xad, 0xef, 0x7c, 0x11, 0x33, 0xf5, 0xa1, 0x1f, 0xb1, 0xf8, 0xfd, 0xba, 0x0b, 0xf5,
	0xf8, 0x66, 0xd2, 0x95, 0xc2, 0x98, 0x5e, 0x6b, 0xde, 0x54, 0x4f, 0x3e, 0x93, 0xb1, 0xa7, 0x16,
	0xf5, 0xc1, 0xe3, 0x2f, 0x6b, 0x1f, 0x5a, 0x93, 0x74, 0xa6, 0xcb, 0xb0, 0x05, 0xe5, 0x83, 0xb1,
	0x20, 0x3c, 0xae, 0x40, 0xfd, 0xf1, 0xd9, 0xf7, 0x06, 0x6c, 0x14, 0x57, 0x00, 0x5a, 0x87, 0x5a,
	0xea, 0x41, 0xd0, 0xb8, 0x81, 0x56, 0xa1, 0x3a, 0x19, 0xdf, 0x0d, 0x03, 0xd5, 0xa1, 0x22, 0x3f,
	0x65, 0x69, 0x34, 0x96, 0xd0, 0x3d, 0xd8, 0x4d, 0x69, 0xcb, 0xb4, 0xfa, 0x91, 0x98, 0x99, 0x27,
	0x8d, 0x12, 0xaa, 0xc1, 0xca, 0x4b, 0x5f, 0x0c, 0x29, 0x1b, 0x34, 0x96, 0x25, 0xe0, 0x24, 0x3b,
	0x8d, 0xf2, 0xc3, 0x7f, 0x54, 0x60, 0xed, 0xe9, 0xd1, 0xb3, 0x57, 0xfe, 0x59, 0xf2, 0x98, 0x47,
	0xbf, 0x85, 0xad, 0x45, 0x8f, 0x7d, 0x64, 0xd9, 0x57, 0xfe, 0x17, 0xd0, 0xde, 0xc8, 0xa5, 0xee,
	0xc8, 0x0b, 0xc4, 0xd8, 0xba, 0x81, 0x6c, 0x80, 0xaf, 0x69, 0xc8, 0x63, 0x42, 0x8a, 0xa7, 0xcb,
	0x02, 0xfd, 0x27, 0x99, 0x88, 0xa0, 0x66, 0xee, 0xc1, 0xb4, 0xc0, 0xf6, 0x7e, 0x2a, 0x78, 0xd7,
	0xd8, 0x6a, 0x7f, 0x1a, 0xdc, 0x6b, 0x68, 0x1f, 0x43, 0x5b, 0xbb, 0x92, 0x2a, 0xf6, 0x69, 0xe6,
	0xd7, 0xed, 0x6c, 0x0f, 0x2c, 0x00, 0xfa, 0x29, 0xd4, 0x8f, 0x89, 0x38, 0xe9, 0x1c, 0x9c, 0xaa,
	0xff, 0x5c, 0xd0, 0x1c, 0xcd, 0x76, 0x53, 0x4f, 0x9a, 0xb3, 0x0e, 0x13, 0x8f, 0x7e, 0xac, 0xce,
	0x6f, 0xdd, 0x40, 0x2f, 0x12, 0x2f, 0x0a, 0xeb, 0xef, 0xb6, 0x5d, 0x24, 0x5e, 0xe0, 0xcb, 0x2f,
	0xe0, 0xd6, 0x31, 0x11, 0x87, 0x51, 0x18, 0x12, 0x26, 0xa6, 0xcf, 0xa3, 0x79, 0x2e, 0xa5, 0xa6,
	0x84, 0x55, 0xfe, 0xc3, 0xf7, 0xff, 0x35, 0x0c, 0xf4, 0x3b, 0xb0, 0x0a, 0x10, 0x66, 0x47, 0xce,
	0x3c, 0xc0, 0x4d, 0x7b, 0x9e, 0x49, 0x82, 0xff, 0x13, 0xe5, 0xa1, 0x5a, 0x48, 0x9f, 0x34, 0x1f,
	0x9c, 0x76, 0x9c, 0xc2, 0xc4, 0xb0, 0x03, 0xb7, 0xa7, 0x8e, 0x5d, 0xc7, 0x97, 0x82, 0x78, 0xc7,
	0x50, 0x87, 0xd0, 0x9e, 0x81, 0x4a, 0xbb, 0x32, 0x0f, 0x6f, 0xc6, 0x9f, 0x67, 0x70, 0xe7, 0x98,
	0x88, 0xcc, 0x4b, 0xe3, 0x03, 0x50, 0x9e, 0x43, 0x6b, 0xea, 0xca, 0xf4, 0x05, 0xfa, 0xfe, 0x87,
	0x6a, 0x3f, 0xfe, 0xeb, 0x3f, 0xff, 0x63, 0x7c, 0x29, 0x7b, 0xda, 0x4e, 0x7a, 0x99, 0x4f, 0xcb,
	0xc7, 0xd6, 0x43, 0xc2, 0xce, 0xce, 0x8a, 0x33, 0x81, 0x05, 0x39, 0xb0, 0xfe, 0xb2, 0xb4, 0x7d,
	0x85, 0xdd, 0xc5, 0x4d, 0xe5, 0xc7, 0x97, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x35, 0xdb, 0x7e,
	0xb1, 0xfd, 0x14, 0x00, 0x00,
}
