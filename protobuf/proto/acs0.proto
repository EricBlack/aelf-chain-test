syntax = "proto3";

package acs0;

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service ACS0 {
    // Actions
    rpc DeploySystemSmartContract (SystemContractDeploymentInput) returns (aelf.Address) {
    }
    rpc DeploySmartContract (ContractDeploymentInput) returns (aelf.Address) {
    }
    rpc UpdateSmartContract (ContractUpdateInput) returns (aelf.Address) {
    }
    rpc ChangeContractOwner (ChangeContractOwnerInput) returns (google.protobuf.Empty) {
    }
    // Views
    rpc CurrentContractSerialNumber (google.protobuf.Empty) returns (google.protobuf.UInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetContractInfo (aelf.Address) returns (ContractInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetContractOwner (aelf.Address) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc GetContractHash (aelf.Address) returns (aelf.Hash) {
        option (aelf.is_view) = true;
    }
    rpc GetContractAddressByName (aelf.Hash) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc GetSmartContractRegistrationByAddress (aelf.Address) returns (aelf.SmartContractRegistration) {
        option (aelf.is_view) = true;
    }
}

// Messages

message ContractInfo
{
    uint64 SerialNumber=1;
    aelf.Address Owner = 2;
    int32 Category = 3;
    aelf.Hash CodeHash = 4;
}

message ContractDeploymentInput {
    sint32 category = 1;
    bytes code = 2;
}

message SystemContractDeploymentInput {
    message SystemTransactionMethodCall {
        string MethodName = 1;
        bytes Params = 2;
    }
    message SystemTransactionMethodCallList {
        repeated SystemTransactionMethodCall Value = 1;
    }
    sint32 category = 1;
    bytes code = 2;
    aelf.Hash name = 3;
    SystemTransactionMethodCallList transactionMethodCallList = 4;
}

message ContractUpdateInput {
    aelf.Address address = 1;
    bytes code = 2;
}

message ChangeContractOwnerInput {
    aelf.Address contractAddress = 1;
    aelf.Address newOwner = 2;
}

// Events
message ContractDeployed
{
    option (aelf.is_event) = true;
    aelf.Address creator = 1 [(aelf.is_indexed) = true];
    aelf.Hash codeHash = 2 [(aelf.is_indexed) = true];
    aelf.Address address = 3;
}

message CodeUpdated
{
    option (aelf.is_event) = true;
    aelf.Address address = 1 [(aelf.is_indexed) = true];
    aelf.Hash oldCodeHash = 2;
    aelf.Hash newCodeHash = 3;
}

message OwnerChanged
{
    option (aelf.is_event) = true;
    aelf.Address address = 1 [(aelf.is_indexed) = true];
    aelf.Address oldOwner = 2;
    aelf.Address newOwner = 3;
}
